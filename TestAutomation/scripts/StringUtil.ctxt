#BlueJ class context
comment0.params=source\ splitter
comment0.target=java.lang.String[]\ split(java.lang.String,\ java.lang.String)
comment0.text=\r\n\ Like\ jdk1.4's\ String.split...\r\n
comment1.params=parts\ splitter
comment1.target=java.lang.String\ unsplit(java.lang.String[],\ java.lang.String)
comment1.text=\r\n\ Reverse\ the\ split\ operation.\r\n\ \r\n\ @param\ parts\r\n\ \ \ \ \ \ \ \ The\ parts\ to\ combine\r\n\ @param\ splitter\r\n\ \ \ \ \ \ \ \ The\ between-parts\ text\r\n
comment10.params=target\ substring
comment10.target=boolean\ containsIgnoreCase(java.lang.String,\ java.lang.String)
comment10.text=\r\n\ Check\ if\ the\ target\ contains\ the\ substring\ anywhere,\ ignore\ case.\r\n\ \r\n\ @param\ target\r\n\ \ \ \ \ \ \ \ The\ string\ to\ check.\r\n\ @param\ substring\r\n\ \ \ \ \ \ \ \ The\ value\ to\ check\ for.\r\n\ @return\ true\ of\ the\ target\ contains\ the\ substring\ anywhere,\ ignore\ case,\ or\ false\ if\ it\ does\ not.\r\n
comment11.params=a\ b
comment11.target=boolean\ different(java.lang.String,\ java.lang.String)
comment11.text=\r\n\ Compare\ two\ strings\ for\ differences,\ either\ may\ be\ null\r\n\ \r\n\ @param\ a\r\n\ \ \ \ \ \ \ \ One\ String.\r\n\ @param\ b\r\n\ \ \ \ \ \ \ \ The\ other\ String.\r\n\ @return\ true\ if\ the\ strings\ are\ different,\ false\ if\ they\ are\ the\ same.\r\n
comment12.params=a\ b\ ignoreCase
comment12.target=boolean\ different(java.lang.String,\ java.lang.String,\ boolean)
comment12.text=\r\n\ Compare\ two\ strings\ for\ differences,\ either\ may\ be\ null,\ ignore\ case\ if\ specified\r\n\ \r\n\ @param\ a\r\n\ \ \ \ \ \ \ \ One\ String.\r\n\ @param\ b\r\n\ \ \ \ \ \ \ \ The\ other\ String.\r\n\ @param\ ignoreCase\r\n\ \ \ \ \ \ \ \ if\ true,\ we\ will\ do\ the\ compare\ case\ insensitive.\r\n\ @return\ true\ if\ the\ strings\ are\ different,\ false\ if\ they\ are\ the\ same.\r\n
comment13.params=a\ b
comment13.target=boolean\ different(java.lang.String[],\ java.lang.String[])
comment13.text=\r\n\ Compare\ two\ String[]\ for\ differences,\ either\ may\ be\ null\r\n\ \r\n\ @param\ a\r\n\ \ \ \ \ \ \ \ One\ String[].\r\n\ @param\ b\r\n\ \ \ \ \ \ \ \ The\ other\ String[].\r\n\ @return\ true\ if\ the\ String[]s\ are\ different,\ false\ if\ they\ are\ the\ same.\r\n
comment14.params=a\ b
comment14.target=boolean\ different(byte[],\ byte[])
comment14.text=\r\n\ Compare\ two\ byte[]\ for\ differences,\ either\ may\ be\ null\r\n\ \r\n\ @param\ a\r\n\ \ \ \ \ \ \ \ One\ byte[].\r\n\ @param\ b\r\n\ \ \ \ \ \ \ \ The\ other\ byte[].\r\n\ @return\ true\ if\ the\ byte[]s\ are\ different,\ false\ if\ they\ are\ the\ same.\r\n
comment15.params=value\ length
comment15.target=java.lang.String\ limit(java.lang.String,\ int)
comment15.text=\r\n\ Limit\ the\ string\ to\ a\ certain\ number\ of\ characters,\ adding\ "..."\ if\ it\ was\ truncated\r\n\ \r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ The\ string\ to\ limit.\r\n\ @param\ length\r\n\ \ \ \ \ \ \ \ the\ length\ to\ limit\ to\ (as\ an\ int).\r\n\ @return\ The\ limited\ string.\r\n
comment16.params=stringCollection\ value
comment16.target=boolean\ contains(java.util.Collection,\ java.lang.String)
comment16.text=\r\n\ Determine\ if\ a\ String\ is\ contained\ in\ a\ String\ Collection\r\n\ \r\n\ @param\ stringCollection\r\n\ \ \ \ \ \ \ \ The\ collection\ of\ (String)\ to\ scan\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ The\ value\ to\ look\ for\r\n\ @return\ true\ if\ the\ string\ was\ found\r\n
comment17.params=stringCollection\ value
comment17.target=boolean\ contains(java.lang.String[],\ java.lang.String)
comment17.text=\r\n\ Determine\ if\ a\ String\ is\ contained\ in\ a\ String[]\r\n\ \r\n\ @param\ stringCollection\r\n\ \ \ \ \ \ \ \ The\ String[]\ to\ scan\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ The\ value\ to\ look\ for\r\n\ @return\ true\ if\ the\ string\ was\ found\r\n
comment18.params=stringCollection\ value
comment18.target=boolean\ containsIgnoreCase(java.util.Collection,\ java.lang.String)
comment18.text=\r\n\ Determine\ if\ a\ String\ is\ contained\ in\ a\ String\ Collection,\ ignoring\ case\r\n\ \r\n\ @param\ stringCollection\r\n\ \ \ \ \ \ \ \ The\ collection\ of\ (String)\ to\ scan\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ The\ value\ to\ look\ for\r\n\ @return\ true\ if\ the\ string\ was\ found\r\n
comment19.params=stringCollection\ value
comment19.target=boolean\ containsIgnoreCase(java.lang.String[],\ java.lang.String)
comment19.text=\r\n\ Determine\ if\ a\ String\ is\ contained\ in\ a\ String\ [],\ ignoring\ case\r\n\ \r\n\ @param\ stringCollection\r\n\ \ \ \ \ \ \ \ The\ String[]\ to\ scan\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ The\ value\ to\ look\ for\r\n\ @return\ true\ if\ the\ string\ was\ found\r\n
comment2.params=parts\ index\ length\ splitter
comment2.target=java.lang.String\ unsplit(java.lang.String[],\ int,\ int,\ java.lang.String)
comment2.text=\r\n\ Reverse\ the\ split\ operation.\r\n\ \r\n\ @param\ parts\r\n\ \ \ \ \ \ \ \ The\ parts\ to\ combine\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ the\ index\ to\ the\ fist\ part\ to\ use\r\n\ @param\ length\r\n\ \ \ \ \ \ \ \ the\ number\ of\ parts\ to\ use\r\n\ @param\ splitter\r\n\ \ \ \ \ \ \ \ The\ between-parts\ text\r\n
comment20.params=stringCollection\ value\ ignoreCase
comment20.target=boolean\ contains(java.lang.String[],\ java.lang.String,\ boolean)
comment20.text=\r\n\ Determine\ if\ a\ String\ is\ contained\ in\ a\ String\ [],\ ignoring\ case\ or\ not\ as\ specified\r\n\ \r\n\ @param\ stringCollection\r\n\ \ \ \ \ \ \ \ The\ String[]\ to\ scan\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ The\ value\ to\ look\ for\r\n\ @param\ ignoreCase\r\n\ \ \ \ \ \ \ \ if\ true,\ we\ will\ do\ the\ compare\ case\ insensitive.\r\n\ @return\ true\ if\ the\ string\ was\ found\r\n
comment3.params=source\ splitter
comment3.target=java.lang.String[]\ splitFirst(java.lang.String,\ java.lang.String)
comment3.text=\r\n\ Split\ the\ source\ into\ two\ strings\ at\ the\ first\ occurrence\ of\ the\ splitter\ Subsequent\ occurrences\ are\ not\ treated\ specially,\ and\ may\ be\ part\ of\ the\ second\ string.\r\n\ \r\n\ @param\ source\r\n\ \ \ \ \ \ \ \ The\ string\ to\ split\r\n\ @param\ splitter\r\n\ \ \ \ \ \ \ \ The\ string\ that\ forms\ the\ boundary\ between\ the\ two\ strings\ returned.\r\n\ @return\ An\ array\ of\ two\ strings\ split\ from\ source\ by\ splitter.\r\n
comment4.params=ref
comment4.target=java.lang.String\ referencePath(java.lang.String)
comment4.text=\r\n\ Compute\ the\ reference\ path\ (i.e.\ the\ container)\ for\ a\ given\ reference.\r\n\ \r\n\ @param\ ref\r\n\ \ \ \ \ \ \ \ The\ reference\ string.\r\n\ @return\ The\ reference\ root\ for\ the\ given\ reference.\r\n
comment5.params=root\ relative
comment5.target=java.lang.String\ fullReference(java.lang.String,\ java.lang.String)
comment5.text=\r\n\ Create\ a\ full\ reference\ from\ a\ relative\ reference\ merged\ with\ a\ root\ reference.\r\n\ \r\n\ @param\ root\r\n\ \ \ \ \ \ \ \ The\ root\ reference,\ which\ is\ the\ root\ of\ the\ full\ reference.\r\n\ @param\ relative\r\n\ \ \ \ \ \ \ \ The\ relative\ reference,\ to\ add\ to\ the\ path\ of\ the\ root.\r\n\ @return\ A\ full\ reference\ from\ the\ root\ and\ relative\ references.\r\n
comment6.params=value
comment6.target=java.lang.String\ trimToNull(java.lang.String)
comment6.text=\r\n\ Trim\ blanks,\ and\ if\ nothing\ left,\ make\ null.\r\n\ \r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ The\ string\ to\ trim.\r\n\ @return\ value\ trimmed\ of\ blanks,\ and\ if\ nothing\ left,\ made\ null.\r\n\ @deprecated\ use\ commons-lang\ StringUtils.trimToNull\r\n
comment7.params=value
comment7.target=java.lang.String\ trimToNullLower(java.lang.String)
comment7.text=\r\n\ Trim\ blanks,\ and\ if\ nothing\ left,\ make\ null,\ else\ lowercase.\r\n\ \r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ The\ string\ to\ trim.\r\n\ @return\ value\ trimmed\ of\ blanks,\ lower\ cased,\ and\ if\ nothing\ left,\ made\ null.\r\n
comment8.params=value
comment8.target=java.lang.String\ trimToZero(java.lang.String)
comment8.text=\r\n\ Trim\ blanks,\ and\ assure\ there\ is\ a\ value,\ and\ it's\ not\ null.\r\n\ \r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ The\ string\ to\ trim.\r\n\ @return\ value\ trimmed\ of\ blanks,\ assuring\ it\ not\ to\ be\ null.\r\n\ @deprecated\ use\ commons-lang\ StringUtils.trimToEmpty\r\n
comment9.params=value
comment9.target=java.lang.String\ trimToZeroLower(java.lang.String)
comment9.text=\r\n\ Trim\ blanks,\ and\ assure\ there\ is\ a\ value,\ and\ it's\ not\ null,\ then\ lowercase.\r\n\ \r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ The\ string\ to\ trim.\r\n\ @return\ value\ trimmed\ of\ blanks,\ lower\ cased,\ assuring\ it\ not\ to\ be\ null.\r\n
numComments=21
